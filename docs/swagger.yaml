openapi: 3.0.3
info:
  title: Pizza Shop - OpenAPI 3.0
  description: This is a description!
  version: 0.0.1
tags:
  - name: Food
    description: Manages food items in the menu.
  - name: Addon
    description: Manages addon items in the menu.
  - name: Order
    description: Manages customer's orders.
  - name: Customer
    description: Manages customer's details in the database.
paths:
  /api/menu/food:
    post:
      tags:
        - Food
      summary: Allows you to create a new entry in the menu for a food item.
      responses:
        '201':
          $ref: '#/components/responses/FoodSuccess'
        '400':
          $ref: '#/components/responses/ImproperEntryData'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/menu/food/{food_id}:
    parameters:
      - name: food_id
        in: path
        required: true
        description: The unique identifier of the food item.
        schema:
          type: integer
          format: int64
    get:
      tags:
        - Food
      summary: Returns a given food item from the menu.
      responses:
        '200':
          $ref: '#/components/responses/FoodSuccess'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Food
      summary: Updates a given food item from the menu.
      responses:
        '200':
          $ref: '#/components/responses/FoodSuccess'
        '207':
          description: >-
            Some attempts to update the food entry were successful, while others
            were not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PartialSuccess'
                properties:
                  data:
                    type: object
                    example:
                      $ref: '#/components/schemas/Food/example'
                  results:
                    type: object
                    description: >-
                      All of the attempted entries as keys, and boolean values
                      determining whether or not the update attempt on them was
                      successful.
                    properties:
                      name:
                        type: boolean
                      price:
                        type: boolean
                      category:
                        type: boolean
                      size:
                        type: boolean
                    example:
                      name: true
                      price: false
                      category: true
                      size: true
        '400':
          $ref: '#/components/responses/ImproperEntryData'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Food
      summary: Deletes a given menu food item.
      responses:
        '204':
          description: The given operation on the food completed successfully.
        '404':
          $ref: '#/components/responses/NotFound'
  /api/menu/addons:
    post:
      tags:
        - Addon
      summary: Allows you to create a new entry in the menu for an addon.
      responses:
        '201':
          $ref: '#/components/responses/AddonSuccess'
        '400':
          $ref: '#/components/responses/ImproperEntryData'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/menu/addons/{addon_id}:
    parameters:
      - name: addon_id
        in: path
        required: true
        description: The unique identifier of the menu addon.
        schema:
          type: integer
          format: int64
    get:
      tags:
        - Addon
      summary: Returns a given menu addon item.
      responses:
        '200':
          $ref: '#/components/responses/AddonSuccess'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Addon
      summary: Updates a given menu addon item.
      responses:
        '200':
          $ref: '#/components/responses/AddonSuccess'
        '207':
          description: >-
            Some attempts to update the addon entry were successful, while
            others were not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PartialSuccess'
                properties:
                  data:
                    type: object
                    example:
                      $ref: '#/components/schemas/Addon/example'
                  results:
                    type: object
                    description: >-
                      All of the attempted entries as keys, and boolean values
                      determining whether or not the update attempt on them was
                      successful.
                    properties:
                      name:
                        type: boolean
                      type:
                        type: boolean
                      price:
                        type: boolean
                      size:
                        type: boolean
                    example:
                      name: true
                      type: true
                      price: true
                      size: false
        '400':
          $ref: '#/components/responses/ImproperEntryData'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Addon
      summary: Deletes a given menu addon item.
      responses:
        '204':
          description: The given operation on the addon completed successfully.
        '404':
          $ref: '#/components/responses/NotFound'
  /api/customer:
    post:
      tags:
        - Customer
      summary: Allows you to add a new customer to the database.
      responses:
        '201':
          $ref: '#/components/responses/CustomerSuccess'
        '400':
          $ref: '#/components/responses/ImproperEntryData'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/customer/{customer_id}:
    parameters:
      - name: customer_id
        in: path
        required: true
        description: The unique identifier of the customer.
        schema:
          type: integer
          format: int64
    get:
      tags:
        - Customer
      summary: Returns a customer and their information.
      responses:
        '200':
          $ref: '#/components/responses/CustomerSuccess'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Customer
      summary: Updates a given customer in the database.
      responses:
        '200':
          $ref: '#/components/responses/CustomerSuccess'
        '207':
          description: >-
            Some attempts to update information on the customer were successful,
            while others were not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PartialSuccess'
                properties:
                  data:
                    type: object
                    description: >-
                      All of the attempted entries as keys, and boolean values
                      determining whether or not the update attempt on them was
                      successful.
                    properties:
                      name:
                        type: boolean
                      phone:
                        type: boolean
                      address:
                        type: boolean
                    example:
                      name: true
                      phone: false
                      address: false
        '400':
          $ref: '#/components/responses/ImproperEntryData'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Customer
      summary: Deletes a given customer from the database.
      responses:
        '204':
          description: The given operation on the customer completed successfully.
        '404':
          $ref: '#/components/responses/NotFound'
  /api/customer/{customer_id}/order:
    parameters:
      - name: customer_id
        in: path
        required: true
        description: The unique identifier of the customer making the order.
        schema:
          type: integer
          format: int64
    post:
      tags:
        - Order
      summary: Creates an order for a customer.
      responses:
        '201':
          $ref: '#/components/responses/OrderSuccess'
        '400':
          $ref: '#/components/responses/ImproperEntryData'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/order/{order_id}:
    parameters:
      - name: order_id
        in: path
        required: true
        description: The unique identifier of the order.
        schema:
          type: integer
          format: int64
    get:
      tags:
        - Order
      summary: Retrieves a given order.
      responses:
        '200':
          $ref: '#/components/responses/OrderSuccess'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Order
      summary: Updates a given order.
      responses:
        '200':
          $ref: '#/components/responses/OrderSuccess'
        '207':
          description: >-
            Some attempts to update information on the customer's order were
            successful, while others were not.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PartialSuccess'
                properties:
                  data:
                    type: object
                    description: >-
                      All of the attempted entries as keys, and boolean values
                      determining whether or not the update attempt on them was
                      successful.
                    properties:
                      payment_method:
                        type: boolean
                      type:
                        type: boolean
                      addons:
                        type: boolean
                    example:
                      payment_method: true
                      type: false
                      items: false
        '400':
          $ref: '#/components/responses/ImproperEntryData'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Order
      summary: Deletes an order from the database.
      responses:
        '204':
          description: >-
            The given operation on the customer's order was completed
            successfully.
        '404':
          $ref: '#/components/responses/NotFound'
components:
  schemas:
    Addon:
      type: object
      description: >-
        An addon is a menu item that can be appended to an existing food item.
        Addon items, unlike food items, cannot be ordered alone.
      properties:
        id:
          type: integer
          description: The unique identifier of the Addon.
        name:
          type: string
          description: The user-friendly name of the addon.
        type:
          type: string
          description: The kind of addon. Specifically, whether or not it is a pizza addon.
        price:
          type: integer
          description: The price of the addon.
        size:
          type: string
          description: >-
            If this is a pizza addon, this specifies what size of the pizza the
            addon is added to. It is MANDATORY for pizza addons, but optional
            otherwise.
      required:
        - id
        - name
        - type
        - price
      example:
        id: 2
        name: Extra Cheese
        type: Pizza Topping
        price: 2.5
        size: small
    Food:
      type: object
      description: >-
        Food is a proper menu item entry, like bagels or pizza. It can also
        include drinks, and other menu items that can be ordered alone.
      properties:
        id:
          type: integer
          description: The unique identifier of the food item.
        name:
          type: string
          description: The user-friendly name of the food item.
        category:
          type: string
          description: >-
            The category of food this item belongs in. If this category is
            pizza, it MUST specify a size. Otherwise, the sze is optional.
        price:
          type: integer
          description: The price of the menu item.
        size:
          type: string
          description: >-
            The size of the menu item. This is MANDATORY for pizza food types,
            otherwise it is optional.
      required:
        - id
        - name
        - category
        - price
      example:
        id: 4
        name: Hawaiian Pizza
        category: Pizza
        price: 14.5
        size: medium
    Customer:
      type: object
      description: >-
        A customer in the database for the resturant. A customer entry needs to
        be created to place an order.
      properties:
        id:
          type: integer
          description: The unique identifier of the customer within the database.
        name:
          type: string
          description: The full name of the customer.
        phone:
          type: string
          description: The phone number of the customer, in international format.
        address:
          allOf:
            - $ref: '#/components/schemas/CustomerAddress'
      required:
        - id
        - name
        - phone
        - address
      example:
        id: 10
        name: John Doe
        phone: '+15551234567'
        address:
          $ref: '#/components/schemas/CustomerAddress/example'
    CustomerAddress:
      type: object
      description: The address of a customer.
      properties:
        street:
          type: string
          description: The street the customer lives on.
        city:
          type: string
          description: The city the customer resides in.
        province:
          type: string
          description: The province the customer resides in.
      required:
        - street
        - city
        - province
      example:
        street: 50 Rideau St
        city: Ottawa
        province: Ontario
    Order:
      type: object
      description: >-
        An order placed for a given customer. Eventually, it will be possible to
        have multiple customers to one order.
      properties:
        id:
          type: integer
          description: The unique identifier of the order.
        customer_id:
          type: integer
          description: The unique identifier of the customer placing the order.
        payment_method:
          type: string
          description: The specific payment method being used by the customer.
        type:
          type: string
          description: The kind of order being placed, like delivery or dine-in.
        items:
          type: array
          description: An array of OrderItems specifying what the customer ordered.
          items:
            allOf:
              - $ref: '#/components/schemas/OrderItem'
      required:
        - id
        - customer_id
        - payment_method
        - type
        - items
      example:
        id: 44
        customer_id: 10
        payment_method: Visa Debit
        type: Delivery
        items:
          $ref: '#/components/schemas/OrderItem/example'
    OrderItem:
      type: object
      properties:
        food_id:
          type: integer
          description: The unique identifier of the food item being added to the order.
        addons:
          type: array
          description: An array of addon IDs meant to be added to the particular food item.
          items:
            type: integer
            description: >-
              The unique identifier of the addon being appended to the food
              item.
      example:
        food_id: 2
        addons:
          - 1
          - 4
    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: ''
        code:
          type: integer
          example: 0
        data:
          type: object
    PartialSuccess:
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Some items did not successfully update.
        code:
          type: integer
          example: 3000
        data:
          type: object
    BadRequest:
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Invalid request
        code:
          type: integer
          example: 4000
        data:
          type: object
      example:
        success: false
        message: Invalid request
        code: 4000
    MissingEntryData:
      allOf:
        - $ref: '#/components/schemas/BadRequest'
      properties:
        message:
          type: string
          example: Required entry data is missing
        code:
          type: integer
          example: 4001
      example:
        message: Required entry data is missing
        code: 4001
    ImproperEntryData:
      allOf:
        - $ref: '#/components/schemas/BadRequest'
      example:
        message: Improper Entry Data
        code: 4002
    NotFound:
      allOf:
        - $ref: '#/components/schemas/BadRequest'
      example:
        message: Entry not found
        code: 4004
    InternalServerError:
      allOf:
        - $ref: '#/components/schemas/BadRequest'
      example:
        message: An unexpected error occurred
        code: 5000
    AddonSuccess:
      allOf:
        - $ref: '#/components/schemas/Success'
      properties:
        data:
          type: object
          example:
            $ref: '#/components/schemas/Addon/example'
    FoodSuccess:
      allOf:
        - $ref: '#/components/schemas/Success'
      properties:
        data:
          type: object
          example:
            $ref: '#/components/schemas/Food/example'
    CustomerSuccess:
      allOf:
        - $ref: '#/components/schemas/Success'
      properties:
        data:
          type: object
          example:
            $ref: '#/components/schemas/Customer/example'
    OrderSuccess:
      allOf:
        - $ref: '#/components/schemas/Success'
      properties:
        data:
          type: object
          example:
            $ref: '#/components/schemas/Order/example'
  responses:
    AddonSuccess:
      description: The given operation on the addon completed successfully.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/AddonSuccess'
    FoodSuccess:
      description: The given operation on the addon completed successfully.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/FoodSuccess'
    CustomerSuccess:
      description: The given operation on the customer completed successfully.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/CustomerSuccess'
    OrderSuccess:
      description: The given operation on the order completed successfully.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/OrderSuccess'
    BadRequest:
      description: >-
        The request performed was incorrect or malformed in some way. `message`
        should provide more detail.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BadRequest'
    MissingEntryData:
      description: The entry being updated is missing certain required fields.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/MissingEntryData'
    ImproperEntryData:
      description: >-
        The entry has the required data, but it is not properly formatted or of
        the correct type.
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ImproperEntryData'
              - $ref: '#/components/schemas/MissingEntryData'
    NotFound:
      description: The entity requested was not found.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/NotFound'
    InternalServerError:
      description: The server encountered some error.
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/InternalServerError'
